# Created by shamilsakib at 7/14/2016

import copy
import os
import re

from django.core.management.base import BaseCommand

from config.apps import INSTALLED_APPS as PROJECT_APPS

PROJECT_ROOT = os.path.abspath(".")


class Command(BaseCommand):
    ignoring_folders = ['migrations', 'management', 'static', 'templates', '__pycache__', 'contracts', 'managers',
                        'generics',
                        'static', 'templates', 'static_media']
    generating_folders = ['models', 'views', 'forms', 'reports']
    ignore_files = ['translation.py', 'urls.py', 'settings.py', 'manage.py']
    _class_name_parser = [
        re.compile('^class(\s)+(?P<class_name>(\w)+)\([a-zA-Z0-9_.]*(,(\s)*([a-zA-Z0-9_.])+)*\)')
    ]
    _check_if_meta = re.compile('(\s)*class(\s)+Meta')

    def __init__(self, *args, **kwargs):
        super(Command, self).__init__(*args, **kwargs)
        self.requires_system_checks = False
        self.can_import_settings = False
        self.leave_locale_alone = True

    def is_matched(self, path, items):
        _relative_path = path.replace(PROJECT_ROOT + os.sep, '')
        _file = list(
            filter(lambda a: re.search((os.path.normpath(a) + os.sep).replace('\\', '\\\\') + '(.+)',
                                       _relative_path) is not None,
                   items))
        return len(_file) > 0

    def clear_inits(self, init_root, **options):
        _init_path = os.path.join(init_root, '__init__.py')
        self.clear_init_content(_init_path)

        for _inner_folders in filter(lambda it: os.path.isdir(os.path.join(init_root, it)) and
                        it != '__pycache__', os.listdir(init_root)):
            if self.is_matched(os.path.join(init_root, _inner_folders), self.generating_folders) or \
                    options.get('recursive_clear', False):
                opts = copy.deepcopy(options)
                opts.update({
                    'recursive_clear': True
                })
                self.clear_inits(os.path.join(init_root, _inner_folders), **opts)
            else:
                self.clear_inits(os.path.join(init_root, _inner_folders), **options)

    def clear_init_content(self, path):
        _init_file = open(path, 'w+')
        _init_file.write('__author__ = "generated by make_init"\n')
        _init_file.close()

    def handle(self, *args, **options):
        for x in PROJECT_APPS:
            for folder in self.generating_folders:
                folder_path = os.path.join(x.replace('.', os.sep), folder)
                if not os.path.exists(folder_path):
                    os.makedirs(folder_path)
                self.clear_inits(os.path.join(PROJECT_ROOT, os.path.normpath(folder_path)), **options)
