"""
Created by tareq on 1/14/18
"""
from datetime import datetime
from importlib import import_module

from django.core.mail import EmailMultiAlternatives
from django.core.management import BaseCommand
from django.core.urlresolvers import reverse

import settings
from blackwidow.core.models import SchedulerLog
from blackwidow.engine.enums.scheduled_task_enum import ScheduledTaskStatusEnum
from blackwidow.engine.enums.view_action_enum import ViewActionEnum
from settings import BW_APPS

__author__ = 'Tareq'


class Command(BaseCommand):
    @classmethod
    def get_task_list_with_scheduler(cls):
        list_of_tasks = list()

        apps_list = list(BW_APPS)
        apps_list.append('blackwidow.scheduler')
        for app in apps_list:
            try:
                task_module = import_module(str(app) + '.tasks')
                ts = dir(task_module)

                for task_name in ts:
                    try:
                        method = task_module.__dict__.get(task_name)
                        if 'run_every' in method.__dict__.keys() and \
                                task_name not in settings.TASK_MONITOR_IGNORED_TASK_LIST:
                            list_of_tasks.append({
                                'module': task_module,
                                'name': task_name,
                                'schedule': method.__dict__.get('run_every')
                            })
                    except:
                        pass
            except:
                pass
        return list_of_tasks

    @classmethod
    def get_due_tasks(cls, all_tasks):
        due_tasks = list()

        for task in all_tasks:
            if cls.is_task_due(task):
                due_tasks.append(task)

        return due_tasks

    @classmethod
    def is_task_due(cls, task_schedule):
        record = SchedulerLog.objects.filter(reference_task__iexact=task_schedule['name']).order_by(
            '-date_created').first()
        if record:
            last_run_time = record.date_created
            task_schedule['status'] = record.status
            task_schedule['last_runtime'] = datetime.fromtimestamp(last_run_time / 1000).strftime('%d/%m/%Y %H:%M:%S')
        else:
            last_run_time = 0
            task_schedule['status'] = 'N/A'
            task_schedule['last_runtime'] = 'N/A'
        last_run_time = datetime.fromtimestamp(last_run_time / 1000)

        schedule = task_schedule['schedule']

        result = schedule.is_due(last_run_time).is_due
        if result:
            task_schedule['status'] = 'DID NOT RUN'

    @classmethod
    def prepare_task_status_table(cls, all_tasks):
        success = True
        html = '<table style="border-collapse:collapse;width:70%;text-align:center;" border=1>' \
               '<thead>' \
               '<tr>' \
               '<th>Sl No</th>' \
               '<th>Task Name</th>' \
               '<th>Status</th>' \
               '<th>Last Run Time</th>' \
               '</tr>' \
               '</thead>' \
               '<tbody>'
        index = 1
        for task in all_tasks:
            style = ''
            if task['status'] == ScheduledTaskStatusEnum.ERROR.value or task['status'] == 'DID NOT RUN':
                style = 'style="color: red;"'
                success = False
            elif task['status'] == ScheduledTaskStatusEnum.RUNNING.value:
                style = 'style="color: blue;"'
            html += '<tr ' + style + '>' \
                                     '<td>' + str(index) + \
                    '<td style="text-align:left; padding-left:20px;">' + task['name'] + \
                    '</td><td>' + task['status'] + \
                    '</td><td>' + task['last_runtime'] + '</td></tr>'
            index += 1
        html += '</tbody></table>'
        return html, success

    @classmethod
    def send_task_summary_email(cls, email_addresses, success, task_table=''):
        current_time = datetime.now()
        mail_html = '<p>Dear manager,</p><p>Here is the details status of each scheduled tasks:</p>' + task_table
        mail_html += "<p>You can check the scheduler log at: " + settings.SITE_ROOT + reverse(
            SchedulerLog.get_route_name(ViewActionEnum.Manage)) + "</p>"
        mail_html += '<p>This is an automated email generated by Field Buzz system at ' + current_time.strftime(
            '%d/%m/%Y %H:%M:%S') + ' (' + settings.SITE_NAME + ' local time)</p>'

        subject_prefix = 'Success' if success else 'Error'

        mail = EmailMultiAlternatives(
            subject=subject_prefix + ': Task status for ' + settings.SITE_NAME + ' on ' + current_time.strftime(
                "%d/%m/%Y"),
            body="Field Buzz task monitor",
            from_email='Field Buzz Task Monitor<no-reply@field.buzz>',
            to=email_addresses
        )
        mail.attach_alternative(mail_html, "text/html")
        status = mail.send()
        print(status)

    @classmethod
    def run_due_task_manually(cls, due_tasks):
        for task in due_tasks:
            try:
                task_method = getattr(task['module'], task['name'])
                print('Calling: ' + task['name'])
                task_method()
            except:
                pass

    def handle(self, *args, **options):
        list_of_tasks = self.get_task_list_with_scheduler()
        due_tasks = self.get_due_tasks(all_tasks=list_of_tasks)

        task_status_table, success = self.prepare_task_status_table(all_tasks=list_of_tasks)

        if len(due_tasks) > 0:
            try:
                if settings.TASK_MONITOR_ERROR_EMAIL:
                    self.send_task_summary_email(email_addresses=settings.TASK_MONITOR_EMAIL_RECIPIENTS,
                                                 success=success, task_table=task_status_table)
            except:
                pass

            if settings.TASK_MONITOR_RERUN_TASK:
                self.run_due_task_manually(due_tasks=due_tasks)
        else:
            if settings.TASK_MONITOR_SUCCESS_EMAIL:
                self.send_task_summary_email(email_addresses=settings.TASK_MONITOR_EMAIL_RECIPIENTS, success=success,
                                             task_table=task_status_table)
